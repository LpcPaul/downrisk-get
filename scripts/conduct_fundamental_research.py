#!/usr/bin/env python3
"""
Step 1: Âü∫Êú¨Èù¢Á†îÁ©∂ - ‰∏•Ê†ºÊåâÁÖßPROJECT_EXECUTION_WORKFLOW.mdÊâßË°å
Êî∂ÈõÜ15ÂÆ∂ÂÖ¨Âè∏ÁöÑ:
1. Ë¥¢Êä•Êï∞ÊçÆ (ÊúÄËøë4‰∏™Â≠£Â∫¶)
2. Ë°å‰∏öÈò∂ÊÆµÂàÜÊûê
3. ‰∏™ËÇ°‰∏öÂä°ÊúüÂæÖÁÇπÂíåÈ£éÈô©ÁÇπ
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
import json

PROJECT_ROOT = Path(__file__).resolve().parent.parent

# 15ÂÆ∂ÂÖ¨Âè∏ÈÖçÁΩÆ
COMPANIES = {
    'ASMPT': {'ticker': '0522.HK', 'name': 'ASMPT', 'ÁªÜÂàÜË°å‰∏ö': 'ÂçäÂØº‰ΩìËÆæÂ§á-ÂêéÈÅìÂ∞ÅË£Ö'},
    'Â∑ùÊÅíËÇ°‰ªΩ': {'ticker': '002895.SZ', 'name': 'Â∑ùÊÅíËÇ°‰ªΩ', 'ÁªÜÂàÜË°å‰∏ö': 'Á£∑ÂåñÂ∑•-LFP'},
    'Êô∂Ê≥∞ÁßëÊäÄ': {'ticker': '2228.HK', 'name': 'Êô∂Ê≥∞ÁßëÊäÄ', 'ÁªÜÂàÜË°å‰∏ö': 'AIÂà∂ËçØ'},
    'Âª∫ÊªîÁßØÂ±ÇÊùø': {'ticker': '1888.HK', 'name': 'Âª∫ÊªîÁßØÂ±ÇÊùø', 'ÁªÜÂàÜË°å‰∏ö': 'CCLË¶ÜÈìúÊùø'},
    'ÂÖâËøÖÁßëÊäÄ': {'ticker': '002281.SZ', 'name': 'ÂÖâËøÖÁßëÊäÄ', 'ÁªÜÂàÜË°å‰∏ö': 'ÂÖâÈÄö‰ø°Ê®°Âùó'},
    'ËÖæËÆØÊéßËÇ°': {'ticker': '0700.HK', 'name': 'ËÖæËÆØÊéßËÇ°', 'ÁªÜÂàÜË°å‰∏ö': '‰∫íËÅîÁΩëÂπ≥Âè∞'},
    '‰∏≠Â§©ÁßëÊäÄ': {'ticker': '600522.SS', 'name': '‰∏≠Â§©ÁßëÊäÄ', 'ÁªÜÂàÜË°å‰∏ö': 'ÈÄö‰ø°ËÆæÂ§á-Êµ∑ÁºÜÂÖâÁ∫§'},
    'ÈòøÈáåÂ∑¥Â∑¥': {'ticker': '9988.HK', 'name': 'ÈòøÈáåÂ∑¥Â∑¥', 'ÁªÜÂàÜË°å‰∏ö': '‰∫íËÅîÁΩëÂπ≥Âè∞'},
    'ÊæúËµ∑ÁßëÊäÄ': {'ticker': '688008.SS', 'name': 'ÊæúËµ∑ÁßëÊäÄ', 'ÁªÜÂàÜË°å‰∏ö': 'FablessËäØÁâáËÆæËÆ°'},
    'ËÅîÊÉ≥ÈõÜÂõ¢': {'ticker': '0992.HK', 'name': 'ËÅîÊÉ≥ÈõÜÂõ¢', 'ÁªÜÂàÜË°å‰∏ö': 'PCÂà∂ÈÄ†'},
    'Ê±üË•øÈìú‰∏ö': {'ticker': '600362.SS', 'name': 'Ê±üË•øÈìú‰∏ö', 'ÁªÜÂàÜË°å‰∏ö': 'ÈìúÁüøÂºÄÈáá'},
    '‰∏≠ÂõΩÂ∑®Áü≥': {'ticker': '600176.SS', 'name': '‰∏≠ÂõΩÂ∑®Áü≥', 'ÁªÜÂàÜË°å‰∏ö': 'ÁéªÁíÉÁ∫§Áª¥'},
    'ÁâπÂèòÁîµÂ∑•': {'ticker': '600089.SS', 'name': 'ÁâπÂèòÁîµÂ∑•', 'ÁªÜÂàÜË°å‰∏ö': 'ËæìÂèòÁîµËÆæÂ§á+Â§öÊô∂Á°Ö'},
    'Á¥´ÈáëÁüø‰∏ö': {'ticker': '601899.SS', 'name': 'Á¥´ÈáëÁüø‰∏ö', 'ÁªÜÂàÜË°å‰∏ö': 'ÈìúÁüøÂºÄÈáá+ÈªÑÈáëÂºÄÈáá'},
    '‰∏≠ÈáëÈªÑÈáë': {'ticker': '600489.SS', 'name': '‰∏≠ÈáëÈªÑÈáë', 'ÁªÜÂàÜË°å‰∏ö': 'ÈªÑÈáëÂºÄÈáá'},
}

def fetch_financial_data(ticker, company_name):
    """
    ‰ªéYahoo FinanceËé∑ÂèñË¥¢Êä•Êï∞ÊçÆ
    """
    print(f"\n{'='*80}")
    print(f"Ê≠£Âú®Ëé∑Âèñ {company_name} ({ticker}) ÁöÑË¥¢Âä°Êï∞ÊçÆ...")
    print(f"{'='*80}")

    try:
        stock = yf.Ticker(ticker)

        # Ëé∑ÂèñÂü∫Êú¨‰ø°ÊÅØ
        info = stock.info

        # Ëé∑ÂèñÂ≠£Â∫¶Ë¥¢Âä°Êï∞ÊçÆ
        quarterly_financials = stock.quarterly_financials
        quarterly_income = stock.quarterly_income_stmt
        quarterly_balance = stock.quarterly_balance_sheet
        quarterly_cashflow = stock.quarterly_cashflow

        # Ëé∑ÂèñÂπ¥Â∫¶Ë¥¢Âä°Êï∞ÊçÆ‰Ωú‰∏∫Ë°•ÂÖÖ
        annual_financials = stock.financials

        # Ëé∑ÂèñÂéÜÂè≤‰ª∑Ê†ºÊï∞ÊçÆÁî®‰∫é‰º∞ÂÄºÂàÜÊûê
        hist = stock.history(period="2y")

        result = {
            'company': company_name,
            'ticker': ticker,
            'info': {
                'marketCap': info.get('marketCap', 'N/A'),
                'trailingPE': info.get('trailingPE', 'N/A'),
                'forwardPE': info.get('forwardPE', 'N/A'),
                'priceToBook': info.get('priceToBook', 'N/A'),
                'profitMargins': info.get('profitMargins', 'N/A'),
                'operatingMargins': info.get('operatingMargins', 'N/A'),
                'returnOnEquity': info.get('returnOnEquity', 'N/A'),
                'returnOnAssets': info.get('returnOnAssets', 'N/A'),
                'debtToEquity': info.get('debtToEquity', 'N/A'),
                'currentRatio': info.get('currentRatio', 'N/A'),
                'freeCashflow': info.get('freeCashflow', 'N/A'),
                'operatingCashflow': info.get('operatingCashflow', 'N/A'),
                'revenueGrowth': info.get('revenueGrowth', 'N/A'),
                'earningsGrowth': info.get('earningsGrowth', 'N/A'),
                'sector': info.get('sector', 'N/A'),
                'industry': info.get('industry', 'N/A'),
            },
            'quarterly_data': {},
            'annual_data': {},
            'price_history': {
                'current_price': hist['Close'].iloc[-1] if len(hist) > 0 else 'N/A',
                '52w_high': hist['Close'].max() if len(hist) > 0 else 'N/A',
                '52w_low': hist['Close'].min() if len(hist) > 0 else 'N/A',
                'ytd_return': ((hist['Close'].iloc[-1] / hist['Close'].iloc[0]) - 1) if len(hist) > 0 else 'N/A',
            }
        }

        # Â§ÑÁêÜÂ≠£Â∫¶Êï∞ÊçÆ
        if not quarterly_income.empty:
            quarters = quarterly_income.columns[:4]  # ÊúÄËøë4‰∏™Â≠£Â∫¶
            result['quarterly_data'] = {
                'periods': [q.strftime('%Y-Q%m') for q in quarters],
                'total_revenue': quarterly_income.loc['Total Revenue', quarters].tolist() if 'Total Revenue' in quarterly_income.index else [],
                'gross_profit': quarterly_income.loc['Gross Profit', quarters].tolist() if 'Gross Profit' in quarterly_income.index else [],
                'operating_income': quarterly_income.loc['Operating Income', quarters].tolist() if 'Operating Income' in quarterly_income.index else [],
                'net_income': quarterly_income.loc['Net Income', quarters].tolist() if 'Net Income' in quarterly_income.index else [],
            }

        # Â§ÑÁêÜÁé∞ÈáëÊµÅÊï∞ÊçÆ
        if not quarterly_cashflow.empty:
            quarters = quarterly_cashflow.columns[:4]
            if 'Operating Cash Flow' in quarterly_cashflow.index:
                result['quarterly_data']['operating_cashflow'] = quarterly_cashflow.loc['Operating Cash Flow', quarters].tolist()
            if 'Free Cash Flow' in quarterly_cashflow.index:
                result['quarterly_data']['free_cashflow'] = quarterly_cashflow.loc['Free Cash Flow', quarters].tolist()

        # ËÆ°ÁÆóÂêåÊØîÂ¢ûÈïøÁéá (Â¶ÇÊûúÊúâÂéªÂπ¥ÂêåÊúüÊï∞ÊçÆ)
        if 'total_revenue' in result['quarterly_data'] and len(result['quarterly_data']['total_revenue']) >= 4:
            revenues = result['quarterly_data']['total_revenue']
            result['quarterly_data']['revenue_yoy_growth'] = [
                ((revenues[i] / revenues[i+4] - 1) * 100) if i+4 < len(revenues) and revenues[i+4] != 0 else None
                for i in range(min(4, len(revenues)))
            ]

        print(f"‚úÖ {company_name} Êï∞ÊçÆËé∑ÂèñÊàêÂäü")
        print(f"   - ÂΩìÂâçPE: {result['info']['trailingPE']}")
        print(f"   - PB: {result['info']['priceToBook']}")
        print(f"   - ROE: {result['info']['returnOnEquity']}")
        print(f"   - ÊúÄËøë4Â≠£Â∫¶Êï∞ÊçÆ: {len(result['quarterly_data'].get('periods', []))}‰∏™Â≠£Â∫¶")

        return result

    except Exception as e:
        print(f"‚ùå {company_name} Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•: {str(e)}")
        return {
            'company': company_name,
            'ticker': ticker,
            'error': str(e),
            'info': {},
            'quarterly_data': {},
            'annual_data': {},
            'price_history': {}
        }

def analyze_quarterly_trends(quarterly_data):
    """
    ÂàÜÊûêÂ≠£Â∫¶Êï∞ÊçÆË∂ãÂäø
    """
    if not quarterly_data or 'total_revenue' not in quarterly_data:
        return "Êï∞ÊçÆ‰∏çË∂≥,Êó†Ê≥ïÂàÜÊûêË∂ãÂäø"

    revenues = quarterly_data.get('total_revenue', [])
    if len(revenues) < 4:
        return "Êï∞ÊçÆ‰∏çË∂≥,Êó†Ê≥ïÂàÜÊûêË∂ãÂäø"

    # ËÆ°ÁÆóÁéØÊØîÂ¢ûÈïø
    qoq_growth = [(revenues[i] - revenues[i+1]) / revenues[i+1] * 100
                  for i in range(len(revenues)-1) if revenues[i+1] != 0]

    if len(qoq_growth) >= 3:
        if all(g > 5 for g in qoq_growth[:3]):
            return "Âä†ÈÄüÂ¢ûÈïø ‚¨ÜÔ∏è‚¨ÜÔ∏è"
        elif all(g > 0 for g in qoq_growth[:3]):
            return "Âπ≥Á®≥Â¢ûÈïø ‚¨ÜÔ∏è"
        elif all(g < -5 for g in qoq_growth[:3]):
            return "Âä†ÈÄü‰∏ãÊªë ‚¨áÔ∏è‚¨áÔ∏è"
        elif all(g < 0 for g in qoq_growth[:3]):
            return "Âπ≥Á®≥‰∏ãÊªë ‚¨áÔ∏è"
        else:
            return "Ê≥¢Âä® „Äú"

    return "Êï∞ÊçÆ‰∏çË∂≥"

def generate_fundamental_report(data):
    """
    ÁîüÊàêÂü∫Êú¨Èù¢Á†îÁ©∂Êä•Âëä
    """
    report = []
    report.append(f"\n{'='*100}")
    report.append(f"Âü∫Êú¨Èù¢Á†îÁ©∂Êä•Âëä: {data['company']} ({data['ticker']})")
    report.append(f"{'='*100}\n")

    if 'error' in data:
        report.append(f"‚ö†Ô∏è Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•: {data['error']}\n")
        return "\n".join(report)

    # 1. Ë¥¢Êä•ÂàÜÊûê
    report.append("üìä 1. Ë¥¢Êä•ÂàÜÊûê (ÊúÄËøë4‰∏™Â≠£Â∫¶)")
    report.append("-" * 100)

    info = data['info']
    quarterly = data['quarterly_data']

    report.append(f"\n‰º∞ÂÄºÊåáÊ†á:")
    report.append(f"  ÂΩìÂâçPE: {info.get('trailingPE', 'N/A')}")
    report.append(f"  PB: {info.get('priceToBook', 'N/A')}")
    report.append(f"  Â∏ÇÂÄº: {info.get('marketCap', 'N/A'):,.0f}" if isinstance(info.get('marketCap'), (int, float)) else f"  Â∏ÇÂÄº: N/A")

    report.append(f"\nÁõàÂà©ËÉΩÂäõ:")
    report.append(f"  ÊØõÂà©Áéá: {info.get('profitMargins', 'N/A')}")
    report.append(f"  Ëê•‰∏öÂà©Ê∂¶Áéá: {info.get('operatingMargins', 'N/A')}")
    report.append(f"  ROE: {info.get('returnOnEquity', 'N/A')}")
    report.append(f"  ROA: {info.get('returnOnAssets', 'N/A')}")

    if quarterly.get('periods'):
        report.append(f"\nÊúÄËøë4‰∏™Â≠£Â∫¶Êï∞ÊçÆ:")
        report.append(f"  Â≠£Â∫¶: {' | '.join(quarterly['periods'])}")

        if quarterly.get('total_revenue'):
            revenues = quarterly['total_revenue']
            report.append(f"  Ëê•Êî∂: {' | '.join([f'{r/1e9:.2f}B' if r > 1e9 else f'{r/1e6:.2f}M' for r in revenues])}")
            trend = analyze_quarterly_trends(quarterly)
            report.append(f"  Ë∂ãÂäø: {trend}")

        if quarterly.get('net_income'):
            profits = quarterly['net_income']
            report.append(f"  ÂáÄÂà©Ê∂¶: {' | '.join([f'{p/1e9:.2f}B' if abs(p) > 1e9 else f'{p/1e6:.2f}M' for p in profits])}")

        if quarterly.get('revenue_yoy_growth'):
            yoy = quarterly['revenue_yoy_growth']
            yoy_str = ' | '.join([f'{g:.1f}%' if g is not None else 'N/A' for g in yoy])
            report.append(f"  Ëê•Êî∂ÂêåÊØî: {yoy_str}")

    report.append(f"\nÁé∞ÈáëÊµÅ:")
    report.append(f"  ÁªèËê•Áé∞ÈáëÊµÅ: {info.get('operatingCashflow', 'N/A')}")
    report.append(f"  Ëá™Áî±Áé∞ÈáëÊµÅ: {info.get('freeCashflow', 'N/A')}")

    report.append(f"\nË¥¢Âä°ÂÅ•Â∫∑:")
    report.append(f"  ËµÑ‰∫ßË¥üÂÄ∫Áéá: {info.get('debtToEquity', 'N/A')}")
    report.append(f"  ÊµÅÂä®ÊØîÁéá: {info.get('currentRatio', 'N/A')}")

    # 2. ËÇ°‰ª∑Ë°®Áé∞
    price_hist = data['price_history']
    report.append(f"\nüìà 2. ËÇ°‰ª∑Ë°®Áé∞")
    report.append("-" * 100)
    report.append(f"  ÂΩìÂâç‰ª∑: {price_hist.get('current_price', 'N/A')}")
    report.append(f"  52Âë®È´òÁÇπ: {price_hist.get('52w_high', 'N/A')}")
    report.append(f"  52Âë®‰ΩéÁÇπ: {price_hist.get('52w_low', 'N/A')}")
    if isinstance(price_hist.get('ytd_return'), (int, float)):
        report.append(f"  Âπ¥ÂàùËá≥‰ªäÂõûÊä•: {price_hist['ytd_return']:.2%}")

    report.append("\n")
    return "\n".join(report)

def main():
    print("=" * 100)
    print("ÂºÄÂßãÊâßË°å Step 1: Âü∫Êú¨Èù¢Á†îÁ©∂")
    print("=" * 100)
    print(f"Á†îÁ©∂ÂØπË±°: {len(COMPANIES)}ÂÆ∂ÂÖ¨Âè∏")
    print(f"Êï∞ÊçÆÊù•Ê∫ê: Yahoo Finance API")
    print(f"Êó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
    output_dir = PROJECT_ROOT / 'data' / 'fundamental_research'
    output_dir.mkdir(parents=True, exist_ok=True)

    # Êî∂ÈõÜÊâÄÊúâÂÖ¨Âè∏Êï∞ÊçÆ
    all_data = {}
    all_reports = []

    for company_name, config in COMPANIES.items():
        ticker = config['ticker']
        data = fetch_financial_data(ticker, company_name)
        data['ÁªÜÂàÜË°å‰∏ö'] = config['ÁªÜÂàÜË°å‰∏ö']

        all_data[company_name] = data

        # ÁîüÊàê‰∏™Âà´Êä•Âëä
        report = generate_fundamental_report(data)
        all_reports.append(report)
        print(report)

    # ‰øùÂ≠òJSONÊï∞ÊçÆ
    json_path = output_dir / 'financial_data.json'
    with open(json_path, 'w', encoding='utf-8') as f:
        # ËΩ¨Êç¢numpy/pandasÁ±ªÂûã‰∏∫PythonÂéüÁîüÁ±ªÂûã
        import json
        def convert_to_serializable(obj):
            if isinstance(obj, (np.integer, np.floating)):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif isinstance(obj, list):
                return [convert_to_serializable(item) for item in obj]
            elif isinstance(obj, dict):
                return {k: convert_to_serializable(v) for k, v in obj.items()}
            else:
                try:
                    if pd.isna(obj):
                        return None
                except (ValueError, TypeError):
                    pass
            return obj

        serializable_data = {}
        for k, v in all_data.items():
            serializable_data[k] = {}
            for key, value in v.items():
                if isinstance(value, dict):
                    serializable_data[k][key] = {
                        sub_k: convert_to_serializable(sub_v)
                        for sub_k, sub_v in value.items()
                    }
                else:
                    serializable_data[k][key] = convert_to_serializable(value)

        json.dump(serializable_data, f, ensure_ascii=False, indent=2)

    # ‰øùÂ≠òÁªºÂêàÊä•Âëä
    report_path = output_dir / 'fundamental_research_report.txt'
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("=" * 100 + "\n")
        f.write("15ÂÆ∂ÂÖ¨Âè∏Âü∫Êú¨Èù¢Á†îÁ©∂ÁªºÂêàÊä•Âëä\n")
        f.write("=" * 100 + "\n")
        f.write(f"Êä•ÂëäÊó•Êúü: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Êï∞ÊçÆÊù•Ê∫ê: Yahoo Finance API\n")
        f.write(f"Á†îÁ©∂ËåÉÂõ¥: {len(COMPANIES)}ÂÆ∂ÂÖ¨Âè∏\n")
        f.write("\n")

        for report in all_reports:
            f.write(report)
            f.write("\n" + "=" * 100 + "\n\n")

    print("\n" + "=" * 100)
    print("‚úÖ Step 1: Âü∫Êú¨Èù¢Á†îÁ©∂ÂÆåÊàê")
    print("=" * 100)
    print(f"‚úÖ JSONÊï∞ÊçÆÂ∑≤‰øùÂ≠ò: {json_path}")
    print(f"‚úÖ ÁªºÂêàÊä•ÂëäÂ∑≤‰øùÂ≠ò: {report_path}")
    print("\n‰∏ã‰∏ÄÊ≠•: ËøõË°åË°å‰∏öÁ†îÁ©∂Âíå‰∏™ËÇ°ÂàÜÊûê (Step 1.2, 1.3)")

if __name__ == "__main__":
    main()
